(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{507:function(v,_,p){"use strict";p.r(_);var l=p(4),i=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"创建型设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建型设计模式"}},[v._v("#")]),v._v(" 创建型设计模式")]),v._v(" "),_("h2",{attrs:{id:"简单工厂模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂模式"}},[v._v("#")]),v._v(" 简单工厂模式")]),v._v(" "),_("p",[v._v("定义：由工厂对象决定生产出哪一种产品实例")]),v._v(" "),_("p",[v._v("类型：创建型，但不属于GOF23种设计模式")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("工厂类负责创建的对象比较少")])]),v._v(" "),_("li",[_("p",[v._v("客户端（应用层）只知道传入工厂类的参数，对如何创建对象（逻辑）不关心")])])]),v._v(" "),_("p",[v._v("优点：只需要传入一个正确的参数，就可以获取你所需要的对象，而无需知道其创建细节")]),v._v(" "),_("p",[v._v("缺点：工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，违背开闭原则")]),v._v(" "),_("p",[v._v("源码实例：jdk中的Calendar类中的createCalendar方法就使用了简单工厂的模式，可以理解为Calendar类就是简单工厂类，createCalendar方法可以根据参数创建出不同的日期实例类")]),v._v(" "),_("h2",{attrs:{id:"工厂方法模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式"}},[v._v("#")]),v._v(" 工厂方法模式")]),v._v(" "),_("p",[v._v("定义：定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("创建对象需要大量重复的代码")])]),v._v(" "),_("li",[_("p",[v._v("客户端（应用层）不依赖于产品类实例如何被创建、实现等细节")])]),v._v(" "),_("li",[_("p",[v._v("一个类通过其子类来指定创建哪个对象")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("用户只需要关心所需要的产品对应的工厂，无需关心创建细节")])]),v._v(" "),_("li",[_("p",[v._v("加入新产品符合开闭原则，提高可扩展性")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("类的个数容易过多，增加复杂度")])]),v._v(" "),_("li",[_("p",[v._v("增加了系统的抽象性和理解难度")])])]),v._v(" "),_("p",[v._v("源码实例：Collection接口可以看作一个抽象工厂，其中iterator方法就是获取迭代器产品的工厂方法，Collection的不同实现类看作不同的工厂，如ArrayList、HashSet等，通过他们的iterator方法可以得到不同的迭代器对象。")]),v._v(" "),_("h2",{attrs:{id:"抽象工厂模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[v._v("#")]),v._v(" 抽象工厂模式")]),v._v(" "),_("p",[v._v("定义：抽象工厂模式提供一个创建一系列相关或相互依赖的对象的接口，无需指定他们具体的类")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("客户端（应用层）不依赖于产品实例如何被创建、实现等细节")])]),v._v(" "),_("li",[_("p",[v._v("强调一系列相关产品对象（属于同一产品族）一起使用创建对象需要大量重复代码")])]),v._v(" "),_("li",[_("p",[v._v("提供一个产品类的库，所有的产品以相同的接口出现，从而使客户端不依赖于具体实现")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("具体产品在应用层代码隔离，无需关心创建细节")])]),v._v(" "),_("li",[_("p",[v._v("将一个系列的产品族统一到一起创建")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("规定了所有可能被创建的产品集合，产品族中扩展新的产品比较困难，需要修改抽象工厂的接口")])]),v._v(" "),_("li",[_("p",[v._v("增加了系统的抽象性和理解难度")])])]),v._v(" "),_("blockquote",[_("p",[v._v("工厂方法模式针对的是产品等级，抽象工厂模式针对的是产品族")])]),v._v(" "),_("h2",{attrs:{id:"建造者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式"}},[v._v("#")]),v._v(" 建造者模式")]),v._v(" "),_("p",[v._v("定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示")]),v._v(" "),_("p",[v._v("用户只需要指定需要创建的类型就可以得到它们，建造过程及细节不需要知道")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果一个对象有非常复杂的内部结构")])]),v._v(" "),_("li",[_("p",[v._v("想把复杂的创建过程和使用分离")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("封装性好，创建和使用分离")])]),v._v(" "),_("li",[_("p",[v._v("扩展性好，建造类之间独立，一定程度上解耦")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("产生多余的builder对象")]),v._v(" "),_("li",[v._v("产品内部发生变化，建造者都需要修改，成本较大")])]),v._v(" "),_("h2",{attrs:{id:"单例模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[v._v("#")]),v._v(" 单例模式")]),v._v(" "),_("h2",{attrs:{id:"原型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[v._v("#")]),v._v(" 原型模式")]),v._v(" "),_("p",[v._v("定义：指原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象")]),v._v(" "),_("p",[v._v("不需要知道任何创建细节，不调用构造函数。")]),v._v(" "),_("p",[v._v("是在内存中进行二进制流的拷贝。")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("初始化消耗很多资源")])]),v._v(" "),_("li",[_("p",[v._v("new产生一个对象需要非常繁琐的过程")])]),v._v(" "),_("li",[_("p",[v._v("构造函数比较复杂")])]),v._v(" "),_("li",[_("p",[v._v("循环体中产生大量对象")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("原型模式性能比直接new一个对象高")])]),v._v(" "),_("li",[_("p",[v._v("简化创建过程")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("必须配备克隆方法")])]),v._v(" "),_("li",[_("p",[v._v("对克隆复杂对象或对克隆出的对象进行复杂改造时，容易引入风险")])]),v._v(" "),_("li",[_("p",[v._v("深拷贝、浅拷贝要运用得当")])])]),v._v(" "),_("h1",{attrs:{id:"机构型设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#机构型设计模式"}},[v._v("#")]),v._v(" 机构型设计模式")]),v._v(" "),_("h2",{attrs:{id:"外观模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[v._v("#")]),v._v(" 外观模式")]),v._v(" "),_("p",[v._v("定义：又叫门面模式，提供一个统一的接口用来访问系统中的一群接口")]),v._v(" "),_("p",[v._v("外观模式定义了一个高层接口，让子系统更容易使用。")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("当子系统越来越复杂，增加外观模式提供简单的调用接口")])]),v._v(" "),_("li",[_("p",[v._v("构建多层系统结构，利用外观模式作为每层的入口，简化层间调用")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("简化了调用过程，无需深入了解子系统，防止带来风险")])]),v._v(" "),_("li",[_("p",[v._v("减少系统依赖，松散耦合")])]),v._v(" "),_("li",[_("p",[v._v("更好的划分访问层次")])]),v._v(" "),_("li",[_("p",[v._v("符合迪米特法则，即最少知道原则")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("增加子系统，扩展子系统行为，容易引入风险")])]),v._v(" "),_("li",[_("p",[v._v("不符合开闭原则")])])]),v._v(" "),_("p",[v._v("与其他模式的关系：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("外观模式和中介者模式")]),v._v(" "),_("p",[v._v("外观模式关注的是外界和子系统之间的交互，而中介者模式关注的是子系统内部的交互")])]),v._v(" "),_("li",[_("p",[v._v("外观模式和单例模式")]),v._v(" "),_("p",[v._v("通常可以吧外观模式中的外观对象做成单例的")])]),v._v(" "),_("li",[_("p",[v._v("外观模式和抽象工厂模式")]),v._v(" "),_("p",[v._v("外观类可以通过抽象工厂获取子系统的实例，子系统可以将内部对外观类屏蔽")])])]),v._v(" "),_("h2",{attrs:{id:"装饰着模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#装饰着模式"}},[v._v("#")]),v._v(" 装饰着模式")]),v._v(" "),_("p",[v._v("定义：在不改变原有对象的基础之上，将功能附加到对象上")]),v._v(" "),_("p",[v._v("提供了比继承更富有弹性的替代方案（扩展原有功能）")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("扩展一个类的功能过给一个类添加附加职责")])]),v._v(" "),_("li",[_("p",[v._v("动态的给一个对象添加功能，这些功能可以再动态撤销")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("继承的有利补充，比继承灵活，不改变原有对象的情况下给一个对象扩展功能")])]),v._v(" "),_("li",[_("p",[v._v("通过使用不同装饰类以及这些装饰类的排列组合，可以实现不同的效果")])]),v._v(" "),_("li",[_("p",[v._v("符合开闭原则")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("会出现更多的代码更多的类，增加程序复杂性")])]),v._v(" "),_("li",[_("p",[v._v("动态装饰、多层装饰时会更复杂")])])]),v._v(" "),_("p",[v._v("相关模式：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("装饰者模式和代理模式")]),v._v(" "),_("p",[v._v("装饰者模式关注再对象上动态的添加方法，代理模式关注控制对对象的访问。")]),v._v(" "),_("p",[v._v("代理模式的代理类可以隐藏被代理对象的信息。通常在使用代理模式的时候，会在代理对象中创建被代理对象的实例；而使用装饰者模式的时候，会将原始对象作为一个参数传递给装饰者类的构造器。")])]),v._v(" "),_("li",[_("p",[v._v("装饰者模式和适配器模式")]),v._v(" "),_("p",[v._v("装饰者和被装饰者可以实现相同的接口，或者装饰者是被装饰者的子类；适配器模式中适配器和被适配的类具有不同的接口，也有可能有部分接口重合。")])])]),v._v(" "),_("p",[v._v("源码实例：java.io包下有大量使用装饰者模式的类，如BufferedReader，继承被装饰类Reader，将Reader对象作为被装饰对象放在成员位置上")]),v._v(" "),_("h2",{attrs:{id:"适配器模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式"}},[v._v("#")]),v._v(" 适配器模式")]),v._v(" "),_("p",[v._v("定义：将一个类的接口转换为调用方期望的接口，使原本接口不兼容的类可以一起工作")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("已经存在的类，它的方法和需求不匹配时（方法结果相同或相似）")])]),v._v(" "),_("li",[_("p",[v._v("不是软件设计考虑的设计模式，是随着软件维护，由于不同产品、不同厂家造成功能类似而接口不同情况下的解决方案")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("提高类的透明性和复用性，现有类服用而不需要改变")])]),v._v(" "),_("li",[_("p",[v._v("目标类和适配器类解耦，提高程序扩展性")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("适配器编写过程需要全面考虑，可能会增加系统的复杂性")])]),v._v(" "),_("li",[_("p",[v._v("增加系统代码可读的难度")])])]),v._v(" "),_("p",[v._v("分类：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("对象适配器：符合组合服用原则，使用委托机制")])]),v._v(" "),_("li",[_("p",[v._v("类适配器：通过类继承实现")])])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("适配器模式和外观模式")]),v._v(" "),_("p",[v._v("都是对现有的类现存的系统封装，外观模式定义了新的接口，适配器模式则是复用一个原有的接口；适配器支持两个原有的系统协同工作，外观接口则是在现有的系统中提供一个更为方便的访问入口")])])]),v._v(" "),_("h2",{attrs:{id:"享元模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[v._v("#")]),v._v(" 享元模式")]),v._v(" "),_("p",[v._v("定义：提供了减少对象数量从而改善应用所需对象结构的方法")]),v._v(" "),_("p",[v._v("运用共享技术有效地支持大量细粒度的对象")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("常常应用于系统底层开发，以便解决系统性能问题")]),v._v(" "),_("blockquote",[_("p",[v._v("Java中的字符串常量池，数据库连接池")])])]),v._v(" "),_("li",[_("p",[v._v("系统中有大量的相似对象、需要缓冲池的场景")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("减少对象的创建，减低内存中对象的数量，降低系统的内存，提高效率")])]),v._v(" "),_("li",[_("p",[v._v("减少内存之外的的其他资源占用")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("需要关注内/外部状态，关注线程安全问题")])]),v._v(" "),_("li",[_("p",[v._v("使程序、系统逻辑复杂化")])])]),v._v(" "),_("p",[v._v("扩展")]),v._v(" "),_("p",[v._v("内部状态：在享元对象的内部，并且不会随着环境变化而改变的对象，看作是享元对象的属性")]),v._v(" "),_("p",[v._v("外部状态：会随着环境改变而变化的，比如通过享元模式获取享元对象时，通过不同的传参得到不同的结果")]),v._v(" "),_("p",[v._v("相关模式")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("享元模式和单例模式")]),v._v(" "),_("p",[v._v("容器单例，就是单例模式和享元模式的结合")])])]),v._v(" "),_("h2",{attrs:{id:"组合模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[v._v("#")]),v._v(" 组合模式")]),v._v(" "),_("p",[v._v("定义：将对象组合成树形结构以表示“整体-部分”的层次结构")]),v._v(" "),_("p",[v._v("组合模式使客户端对单个对象和组合对象保持一致的处理方式")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("希望客户端可以忽略组合对象和个别对象的差异时")])]),v._v(" "),_("li",[_("p",[v._v("处理一个树形结构时")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("清楚的定义分层次的复杂对象，表示对象的全部或部分层次")])]),v._v(" "),_("li",[_("p",[v._v("让客户端忽略了层次的差别，方便对整个层次结构进行控制")])]),v._v(" "),_("li",[_("p",[v._v("简化客户端代码")])]),v._v(" "),_("li",[_("p",[v._v("符合开闭原则")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("限制类型时会较为复杂")])]),v._v(" "),_("li",[_("p",[v._v("使设计变得更加抽象")])])]),v._v(" "),_("p",[v._v("相关模式")]),v._v(" "),_("ul",[_("li",[v._v("组合模式和访问者模式：时一种组合应用，可以使用访问者模式访问组合模式中的递归结构")])]),v._v(" "),_("h2",{attrs:{id:"桥接模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[v._v("#")]),v._v(" 桥接模式")]),v._v(" "),_("p",[v._v("定义：将抽象部分和它的具体实现部分分离，是他们可以独立的变化")]),v._v(" "),_("p",[v._v("通过组合的方式建立两个类之间的联系，而不是继承")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("抽象和具体实现之间增加更多的灵活性")])]),v._v(" "),_("li",[_("p",[v._v("一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩展")])]),v._v(" "),_("li",[_("p",[v._v("不希望使用继承，或因为多层继承导致系统类个数剧增")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("分离抽象及其具体实现部分，使得抽象和实现可以沿着各自的维度来变化扩展")])]),v._v(" "),_("li",[_("p",[v._v("投给了系统的可扩展性")])]),v._v(" "),_("li",[_("p",[v._v("符合开闭原则")])]),v._v(" "),_("li",[_("p",[v._v("符合合成复用原则")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("增加了系统的理解和设计难度")])]),v._v(" "),_("li",[_("p",[v._v("需要正确的识别出系统中两个独立变化的维度")])])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("桥接模式和组合模式：组合模式强调部分和整体见的组合；桥接模式强调的是平行级别各个类的组合")])]),v._v(" "),_("li",[_("p",[v._v("桥接模式和适配器模式：都是为了让两个东西配合工作。适配器模式是改变原有的接口实现配合；桥接模式是分离抽象和实现，思想是分离。")])])]),v._v(" "),_("h2",{attrs:{id:"代理模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[v._v("#")]),v._v(" 代理模式")]),v._v(" "),_("p",[v._v("定义：为其他对象提供一种代理，以控制对这个对象的访问")]),v._v(" "),_("p",[v._v("代理对象在对客户端和目标对象之间起到中介的作用")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("保护目标对象")])]),v._v(" "),_("li",[_("p",[v._v("增强目标对象")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("代理模式能将代理对象与真实被调用的目标对象分离")])]),v._v(" "),_("li",[_("p",[v._v("一定程度上降低了系统的耦合度，扩展性好")])]),v._v(" "),_("li",[_("p",[v._v("保护目标对象")])]),v._v(" "),_("li",[_("p",[v._v("增强目标对象")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("代理模式会造成系统中类的数目增多")])]),v._v(" "),_("li",[_("p",[v._v("在客户端和目标对象之间增加一个代理对象，会造成请求速度变慢")])]),v._v(" "),_("li",[_("p",[v._v("增加了系统的复杂度")])])]),v._v(" "),_("p",[v._v("扩展")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("静态代理")]),v._v(" "),_("p",[v._v("在代码种显示的定义了一个业务实现类来代理，在代理类中对同名的业务方法进行包装")])]),v._v(" "),_("li",[_("p",[v._v("动态代理（针对接口）")]),v._v(" "),_("p",[v._v("通过接口中的方法名，在动态生成的代理类中，调用被代理业务类的同名方法")])]),v._v(" "),_("li",[_("p",[v._v("CGLib代理（针对实现类）")]),v._v(" "),_("p",[v._v("会生成被代理类的子类，通过继承重写被代理类的方法，所以要关注类和方法上的final修饰符")])])]),v._v(" "),_("p",[v._v("Spring代理选择")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("当Bean实现了接口时，Spring会使用JDK动态代理")])]),v._v(" "),_("li",[_("p",[v._v("当Bean没有实现接口时，Spring会使用CGLib代理")])]),v._v(" "),_("li",[_("p",[v._v("可以强制使用cglib，在Spring配置中加入"),_("code",[v._v('<aop:aspectj-autoproxy proxy-target-class="true">')])])])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("代理模式和装饰者模式：装饰者模式是为对象加上行为，而代理模式是控制访问，代理模式更加注重通过设置代理对象的方式增强目标对象")])]),v._v(" "),_("li",[_("p",[v._v("代理模式和适配器模式：适配器模式是改变被适配类的接口，而代理模式不改变被代理类的接口")])])]),v._v(" "),_("h1",{attrs:{id:"行为型设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#行为型设计模式"}},[v._v("#")]),v._v(" 行为型设计模式")]),v._v(" "),_("h2",{attrs:{id:"模板方法模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式"}},[v._v("#")]),v._v(" 模板方法模式")]),v._v(" "),_("p",[v._v("定义：定义了一个算法的骨架，并允许子类为一个或多个步骤提供实现")]),v._v(" "),_("p",[v._v("模板方法使得子类在不改变算法结构的情况下，重新定义算法的某些步骤")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("一次性实现一个算法的不变部分，并将算法的可变行为交给子类实现")])]),v._v(" "),_("li",[_("p",[v._v("个子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免重复代码")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("提高复用性")])]),v._v(" "),_("li",[_("p",[v._v("提高扩展性")])]),v._v(" "),_("li",[_("p",[v._v("符合开闭原则")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("类数目的增加")])]),v._v(" "),_("li",[_("p",[v._v("增加了系统的复杂度")])]),v._v(" "),_("li",[_("p",[v._v("继承关系自身的缺点，如果父类添加新的抽象方法，所有子类都要做修改")])])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("工厂方法模式：工厂方法是模板方法的一种特殊实现")])]),v._v(" "),_("li",[_("p",[v._v("策略模式：都有封装算法。策略模式是向往不同的算法之间可以相互替换，并且不影响应用层的使用；而模板方法模式是定义一个算法的流程，将某些实现步骤交给子类实现。模板方法模式是不改变算法的流程的，而策略模式是可以改变算法流程的，并且可以相互替换。")])])]),v._v(" "),_("h2",{attrs:{id:"迭代器模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[v._v("#")]),v._v(" 迭代器模式")]),v._v(" "),_("p",[v._v("定义：提供一种方法，顺序访问一个集合对象中的各个元素，而又不暴露对象的内部表示")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("访问一个集合对象的内容而又无需暴露其内部表示")])]),v._v(" "),_("li",[_("p",[v._v("为遍历不同的集合结构提供一个统一的接口")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[v._v("分离了集合对象的遍历行为")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("类的个数成对增加")])]),v._v(" "),_("p",[v._v("相关模式：")]),v._v(" "),_("ul",[_("li",[v._v("访问者模式：都是迭代的访问一个集合对象中的元素。而两者扩展开放的部分不同，访问者模式扩展开放的是对象的操作上，迭代器模式扩展开放的是集合对象的种类上")])]),v._v(" "),_("h2",{attrs:{id:"策略模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[v._v("#")]),v._v(" 策略模式")]),v._v(" "),_("p",[v._v("定义：定义了算法家族，风别封装起来，让它们之间可以互相替换，此模式让算法的变化不会影响到适用算法的用户。")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("系统有很多类，而他们的区别仅仅在于行为不同")])]),v._v(" "),_("li",[_("p",[v._v("一个系统需要动态地在几种算法中选择一种")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("开闭原则")])]),v._v(" "),_("li",[_("p",[v._v("避免使用多重条件转移语句")])]),v._v(" "),_("li",[_("p",[v._v("提高算法的保密性和安全性")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("客户端必须知道所有的策略类，并自行决定适用哪一个策略类")])]),v._v(" "),_("li",[_("p",[v._v("会产生大量的策略类")])])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("工厂模式：工厂模式接收不同的指令创建不同的对象，策略模式接收创建好的对象，执行不同的算法")])]),v._v(" "),_("li",[_("p",[v._v("状态模式：策略模式的客户端需要知道适用何种策略，状态模式中客户端不需要关心具体状态，状态会自动转换")])])]),v._v(" "),_("h2",{attrs:{id:"解释器模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式"}},[v._v("#")]),v._v(" 解释器模式")]),v._v(" "),_("p",[v._v("定义：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言的句子。")]),v._v(" "),_("p",[v._v("为了解释一种语言，而为语言创建的解释器。")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[v._v("在某个特定类型问题发生频率过高的时候")])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[v._v("语言有很多种解释，容易改变及扩展此“语言”")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("当语言规则过多时，增加了系统的复杂度")])]),v._v(" "),_("h2",{attrs:{id:"观察者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[v._v("#")]),v._v(" 观察者模式")]),v._v(" "),_("p",[v._v("定义：定义了对象之间的一对多依赖，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，它的所有依赖者（观察者）都会收到通知并更新")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[v._v("关联行为场景，建立一套触发机制")])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("观察者和被观察者之间建立了一个抽象的耦合")])]),v._v(" "),_("li",[_("p",[v._v("观察者模式支持广播通信")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("观察之间有过多的细节依赖，提高时间消耗和程序复杂度")])]),v._v(" "),_("h2",{attrs:{id:"备忘录模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式"}},[v._v("#")]),v._v(" 备忘录模式")]),v._v(" "),_("p",[v._v("定义：保存某个对象的某个状态，以便在是适当的时候恢复对象")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("保存及回复数据相关业务场景")])]),v._v(" "),_("li",[_("p",[v._v("想恢复之前的状态")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("为用户提供一种可恢复机制")])]),v._v(" "),_("li",[_("p",[v._v("存档信息封装")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("资源占用")])]),v._v(" "),_("p",[v._v("相关设计模式")]),v._v(" "),_("ul",[_("li",[v._v("状态模式：备忘录模式中是用实例表示状态，而在状态模式中是用类表示状态")])]),v._v(" "),_("h2",{attrs:{id:"命令模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[v._v("#")]),v._v(" 命令模式")]),v._v(" "),_("p",[v._v("定义：将“请求”封装成对象，以便使用不同的请求")]),v._v(" "),_("p",[v._v("命令模式解决了应用程序中对象的职责以及它们之间的通信方式，可以使命令发送者和命令接收者完全解耦")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("请求的调用者和请求的接收者需要解耦，使得调用者和接收者不直接交互")])]),v._v(" "),_("li",[_("p",[v._v("需要抽象出等待接收的行为")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("降低耦合")])]),v._v(" "),_("li",[_("p",[v._v("容易扩展新命令或一组命令")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("命令无限扩展会增加类的数量，提高系统的复杂性")])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[v._v("备忘录模式：经常结合起来使用，用备忘录模式保存命令的记录")])]),v._v(" "),_("h2",{attrs:{id:"中介者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[v._v("#")]),v._v(" 中介者模式")]),v._v(" "),_("p",[v._v("定义：定义一个 一组对象如何交互的 对象")]),v._v(" "),_("p",[v._v("通过使对象明确地互相引用来促进松散耦合，并允许独立地改变他们的交互")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解")])]),v._v(" "),_("li",[_("p",[v._v("交互的公共行为，如果需要改变行为则可以增加新的中介者类")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("将一对多转换成了一对一，降低程序复杂度")])]),v._v(" "),_("li",[_("p",[v._v("类之间解耦")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("中介者类过多，导致系统复杂")])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[v._v("观察者模式：有时候会结合使用，使用观察者模式来实现中介者模式中的角色间的通信")])]),v._v(" "),_("h2",{attrs:{id:"责任链模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式"}},[v._v("#")]),v._v(" 责任链模式")]),v._v(" "),_("p",[v._v("定义：为请求创建一个接收此次请求对象的链")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[v._v("一个请求的处理需要多个对象当中的一个或几个协作处理")])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("请求的发送者和接收者（请求的处理）解耦")])]),v._v(" "),_("li",[_("p",[v._v("责任链可以动态组合")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果责任链太长或处理时间过长，影响性能")])]),v._v(" "),_("li",[_("p",[v._v("责任链有可能过多")])])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[v._v("状态模式：责任链模式中各个对象并不指定下一个处理的对象者是谁，客户端来设置链条的顺序和元素，知道被某个元素处理或这个链条结束；状态模式需要每个状态对象知道下一个处理对象是谁")])]),v._v(" "),_("h2",{attrs:{id:"访问者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式"}},[v._v("#")]),v._v(" 访问者模式")]),v._v(" "),_("p",[v._v("定义：封装作用与某数据结构（如List、Set、Map等）中各元素的操作")]),v._v(" "),_("p",[v._v("可以在不改变个元素类的定义前提下，定义作用与这些元素的操作")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("一个数据结构（如List、Set、Map等）包含很多类型对象")])]),v._v(" "),_("li",[_("p",[v._v("数据结构和数据操作分离")])])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[v._v("增加型的操作很容易，即增加一个新的访问者")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("增加新的数据结构困难")])]),v._v(" "),_("li",[_("p",[v._v("具体元素的变更比较困难")])])]),v._v(" "),_("p",[v._v("相关设计模式：")]),v._v(" "),_("ul",[_("li",[v._v("迭代器模式：共同点都是在某种数据结构上进行处理，访问者模式注重在数据结构上的元素进行某种特定的处理，迭代器模式注重遍历数据结构中的元素。")])]),v._v(" "),_("p",[v._v("用的很少")]),v._v(" "),_("h2",{attrs:{id:"状态模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[v._v("#")]),v._v(" 状态模式")]),v._v(" "),_("p",[v._v("定义：允许一个对象在其内部状态改变时，改变它的行为")]),v._v(" "),_("p",[v._v("适用场景：")]),v._v(" "),_("ul",[_("li",[v._v("一个对象存在多个状态（不同状态下行为不同），且状态可以相互转换")])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("将不同状态隔离")])]),v._v(" "),_("li",[_("p",[v._v("把各种状态的转换逻辑，分不到State的子类中，减少相互依赖")])]),v._v(" "),_("li",[_("p",[v._v("增加新的状态非常简单")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("在状态多的场景会导致类的数目增加，系统变复杂")])])])}),[],!1,null,null,null);_.default=i.exports}}]);