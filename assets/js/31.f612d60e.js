(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{356:function(a,e,t){"use strict";t.r(e);var _=t(4),i=Object(_.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("本章内容包括，RabbitMQ 的高性能之道是如何做到的？什么是 AMQP 高级协议？AMQP 核心概念是什么？RabbitMQ 整体架构模型是什么样子的？RabbitMQ 消息是如何流转的？RabbitMQ 安装与使用命令行与管控台，RabbitMQ 消息生产与消费，RabbitMQ 交换机详解，RabbitMQ 队列、绑定、虚拟主机、消息等...")]),a._v(" "),e("h1",{attrs:{id:"一、rabbitmq-高性能的原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、rabbitmq-高性能的原因"}},[a._v("#")]),a._v(" 一、RabbitMQ 高性能的原因")]),a._v(" "),e("ul",[e("li",[a._v("Erlang 语言最初用于交换机领域的架构模式,这样使得 RabbitMQ 在 Broker 之间进行数据交互的性能是十分优秀的")]),a._v(" "),e("li",[a._v("Erlang 的优点：Erlang 有着和原生 Socket 一样的延迟")])]),a._v(" "),e("h1",{attrs:{id:"二、amqp-高级消息队列协议与模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、amqp-高级消息队列协议与模型"}},[a._v("#")]),a._v(" 二、AMQP 高级消息队列协议与模型")]),a._v(" "),e("h2",{attrs:{id:"_2-1-amqp-定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-amqp-定义"}},[a._v("#")]),a._v(" 2.1 AMQP 定义")]),a._v(" "),e("p",[a._v("AMQP全称：Advanced Message Queuing Protocol（高级消息队列协议）。")]),a._v(" "),e("p",[a._v("AMQP定义：AMQP 是具有现代特征的二进制协议。是一个提供统一消息服务的应用层标准高级消息对下列协议，是一个应用层协议的一个开放标准，为面向消息的中间件设计。")]),a._v(" "),e("h2",{attrs:{id:"_2-2-amqp-协议模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-amqp-协议模型"}},[a._v("#")]),a._v(" 2.2 AMQP 协议模型")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://s3.ax1x.com/2020/11/24/DYOGAs.png",alt:"image-20200711150958903"}})]),a._v(" "),e("p",[a._v("生产者（Publisher application）将消息投递到 Server 端，到达 Exchange 上。消费者（Consumer application）监听 Message Queue，拿到消息进行消费。")]),a._v(" "),e("p",[a._v("其中 Exchange 和 Message Queue 有一定的绑定关系。")]),a._v(" "),e("h2",{attrs:{id:"_2-3-amqp-核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-amqp-核心概念"}},[a._v("#")]),a._v(" 2.3 AMQP 核心概念")]),a._v(" "),e("ul",[e("li",[a._v("Server：又称 Broker，接受客户端的连接，实现 AMQP 实体服务。")]),a._v(" "),e("li",[a._v("Connection：连接，应用程序与 Broker 的网络连接。")]),a._v(" "),e("li",[a._v("Channel：网络信道，几乎所有的操作都在 Channel 中进行，Channel 是进行消息读写的通道。客户端可以建立多个 Channel，每个 Channel 代表一个会话任务。")]),a._v(" "),e("li",[a._v("Message：消息，服务器和应用程序之间传送的数据，由 Properties 和 Body 组成。Properties 可以对消息进行修饰，比如消息的优先级、延迟等高级特征；Body 则就是消息的内容。")]),a._v(" "),e("li",[a._v("Virtual host：虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个 Virtual host 里面可以有若干个 Exchange 和 Queue，同一个 Virtual host 里面不能有相同名称的 Exchange 和 Queue。")]),a._v(" "),e("li",[a._v("Exchange：交换机，接收消息，根据路由键转发消息到绑定的队列。")]),a._v(" "),e("li",[a._v("Binding：Exchange 和 Queue 之间的虚拟连接，binding 中可以包含 routing key（路由键）。")]),a._v(" "),e("li",[a._v("Routing key：一个路由规则，虚拟机可以用它来确定如何路由一个特定的消息。")]),a._v(" "),e("li",[a._v("Queue：可称为 Message Queue，消息队列，保存消息并将它们转发给消费者。")])]),a._v(" "),e("h2",{attrs:{id:"_2-4-rabbitmq-整体架构与消息流转"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-rabbitmq-整体架构与消息流转"}},[a._v("#")]),a._v(" 2.4 RabbitMQ 整体架构与消息流转")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("RabbitMQ 整体架构")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://s3.ax1x.com/2020/11/24/DYOJNn.png",alt:"image-20200711152946005"}})]),a._v(" "),e("p",[a._v("生产者值关注把消息投递到指定的 Exchange，消费者只需要监听指定的队列。Exchange 和 Queue 之间有一个绑定的关系。")])]),a._v(" "),e("li",[e("p",[a._v("RabbitMQ 消息流转图")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://s3.ax1x.com/2020/11/24/DYOYhq.png",alt:"image-20200711153234650"}})]),a._v(" "),e("p",[a._v("生产者将 Message 投递到 Exchange 上，一个 Exchange 可以绑定多个 Message Queue，Exchange 根据路由 key，将消息路由到指定的队列上，消费者监听指定的队列，进行消息消费。")])])]),a._v(" "),e("h1",{attrs:{id:"三、rabbitmq-快速入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、rabbitmq-快速入门"}},[a._v("#")]),a._v(" 三、RabbitMQ 快速入门")]),a._v(" "),e("h2",{attrs:{id:"_3-1-消息生产与消费"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-消息生产与消费"}},[a._v("#")]),a._v(" 3.1 消息生产与消费")]),a._v(" "),e("ul",[e("li",[a._v("ConnectionFactory：获取连接工厂")]),a._v(" "),e("li",[a._v("Connection：一个连接")]),a._v(" "),e("li",[a._v("Channel：数据通信信道，可发送和接收消息")]),a._v(" "),e("li",[a._v("Queue：具体的消息存储队列")]),a._v(" "),e("li",[a._v("Producer & Consumer：生产者和消费者")])]),a._v(" "),e("p",[e("a",{attrs:{href:"rabbitmq-api/src/main/java/com/lucifer/rabbitmq/quickstart"}},[a._v("示例代码")])]),a._v(" "),e("h1",{attrs:{id:"四、exchange-交换机详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、exchange-交换机详解"}},[a._v("#")]),a._v(" 四、Exchange 交换机详解")]),a._v(" "),e("p",[a._v("Exchange：接收消息，并根据路由键转发消息到所绑定的队列")]),a._v(" "),e("h2",{attrs:{id:"_4-1-exchange-概念图解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-exchange-概念图解"}},[a._v("#")]),a._v(" 4.1 Exchange 概念图解")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://s3.ax1x.com/2020/11/24/DYObCt.jpg",alt:"img"}})]),a._v(" "),e("ul",[e("li",[a._v("蓝框：Send Message 过程，表示 Client 端将消息投递到 Exchange 上，通过路由关系路由到指定的队列")]),a._v(" "),e("li",[a._v("绿框：Receive Message 过程，表示 Client 跟队列建立的监听，去接收消息")]),a._v(" "),e("li",[a._v("红框：Rabbit Server")]),a._v(" "),e("li",[a._v("黄框：RoutingKey 和绑定关系，Exchange 和队列要建立绑定关系，消息到达 Exchange 后投递到哪个队列由 RoutingKey 决定")])]),a._v(" "),e("h2",{attrs:{id:"_4-2-交换机属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-交换机属性"}},[a._v("#")]),a._v(" 4.2 交换机属性")]),a._v(" "),e("ul",[e("li",[a._v("Name：交换机名称")]),a._v(" "),e("li",[a._v("Type：交换机类型 direct、topic、fanout、headers")]),a._v(" "),e("li",[a._v("Durability：是否需要持久化，true 为持久化")]),a._v(" "),e("li",[a._v("Auto Delete：当最后一个绑定到 Exchange 上的队列删除后，自动删除该 Exchange")]),a._v(" "),e("li",[a._v("Internal：当前 Exchange 是否用于 RabbitMQ 内部使用，默认为 false")]),a._v(" "),e("li",[a._v("Arguments：扩展参数，用于扩展 AMQP 协议自制定化使用")])]),a._v(" "),e("h2",{attrs:{id:"_4-3-交换机类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-交换机类型"}},[a._v("#")]),a._v(" 4.3 交换机类型")]),a._v(" "),e("h3",{attrs:{id:"_4-3-1-direct-exchange"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-direct-exchange"}},[a._v("#")]),a._v(" 4.3.1 Direct Exchange")]),a._v(" "),e("p",[a._v("直连方式的 Exchange。")]),a._v(" "),e("p",[a._v("所有发送到 Direct Exchange 的消息被转发到 RoutingKey 中指定的 Queue。")]),a._v(" "),e("blockquote",[e("p",[a._v("注意：Direct 模式可以使用 RabbitMQ 自带的 Exchange：default Exchange，所以不需要将 Exchange 进行任何绑定（binding）操作，消息传递时，RoutingKey 必须完全匹配才会被队列接收，否则该消息会被抛弃。")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://s3.ax1x.com/2020/11/24/DYON90.png",alt:"image-20200711202355004"}})]),a._v(" "),e("p",[e("a",{attrs:{href:"rabbitmq-api/src/main/java/com/lucifer/rabbitmq/api/exchange/direct"}},[a._v("示例代码")])]),a._v(" "),e("h3",{attrs:{id:"_4-3-2-direct-exchange"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-direct-exchange"}},[a._v("#")]),a._v(" 4.3.2 Direct Exchange")]),a._v(" "),e("p",[a._v("所有发送到 Topic Exchange 的消息被转发到所有关心 RoutingKey 中指定 Topic 的 Queue 上")]),a._v(" "),e("p",[a._v("Exchange 将 RoutingKey 和某 Topic 进行模糊匹配，此时队列需要绑定一个 Topic。")]),a._v(" "),e("blockquote",[e("p",[a._v("注意：模糊匹配可以使用通配符")]),a._v(" "),e("p",[a._v("“#”  匹配一个或多个词\n“*”  匹配不多不少一个词")]),a._v(" "),e("p",[a._v('如："log.#" 能匹配到 "log.info.oa"， "log.*" 只能匹配到 "log.err"')])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://s3.ax1x.com/2020/11/24/DYOU3V.png",alt:"image-20200711210038672"}})]),a._v(" "),e("p",[e("a",{attrs:{href:"rabbitmq-api/src/main/java/com/lucifer/rabbitmq/api/exchange/topic"}},[a._v("示例代码")])]),a._v(" "),e("h3",{attrs:{id:"_4-3-3-fanout-exchange"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-fanout-exchange"}},[a._v("#")]),a._v(" 4.3.3 Fanout Exchange")]),a._v(" "),e("p",[a._v("不处理路由键，只需要简单地将队列绑定到交换机上；")]),a._v(" "),e("p",[a._v("发送到交换机的消息都会被转发到与交换机绑定的队列上；")]),a._v(" "),e("p",[a._v("Fanout 交换机转发消息是最快的。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://s3.ax1x.com/2020/11/24/DYOacT.png",alt:"image-20200711220646402"}})]),a._v(" "),e("p",[e("a",{attrs:{href:"rabbitmq-api/src/main/java/com/lucifer/rabbitmq/api/exchange/fanout"}},[a._v("示例代码")])]),a._v(" "),e("h1",{attrs:{id:"五、绑定、队列、消息、虚拟主机详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、绑定、队列、消息、虚拟主机详解"}},[a._v("#")]),a._v(" 五、绑定、队列、消息、虚拟主机详解")]),a._v(" "),e("h2",{attrs:{id:"_5-1-binding-绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-binding-绑定"}},[a._v("#")]),a._v(" 5.1 Binding - 绑定")]),a._v(" "),e("ul",[e("li",[a._v("Exchange 和 Exchange、Queue 之间的连接关系")]),a._v(" "),e("li",[a._v("Binding 中可以包含 RoutingKey 或者参数")])]),a._v(" "),e("h2",{attrs:{id:"_5-2-queue-消息队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-queue-消息队列"}},[a._v("#")]),a._v(" 5.2 Queue - 消息队列")]),a._v(" "),e("p",[a._v("消息队列，实际存储消息数据")]),a._v(" "),e("ul",[e("li",[a._v("Durability：是否持久化，Durable：是，Transient：否")]),a._v(" "),e("li",[a._v("Auto delete：如选 yes，代表当最后一个监听被移除之后，该 Queue 会自动被删除")])]),a._v(" "),e("h2",{attrs:{id:"_5-3-message-消息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-message-消息"}},[a._v("#")]),a._v(" 5.3 Message - 消息")]),a._v(" "),e("p",[a._v("服务器和应用程序之间传送的数据")]),a._v(" "),e("p",[a._v("本质上就是一段数据，由 Properties 和 Payload（Body）组成")]),a._v(" "),e("p",[a._v("常用属性：delivery mode（持久化模式）、headers（自定义属性）")]),a._v(" "),e("blockquote",[e("p",[a._v("其他属性：")]),a._v(" "),e("p",[a._v("content_type、content_encoding、priority（优先级）")]),a._v(" "),e("p",[a._v("correlation_id（唯一id）、reply_to、expiration（过期时间）、message_id（消息id）")]),a._v(" "),e("p",[a._v("timestamp、type、user_id、app_id、cluster_id")])]),a._v(" "),e("p",[e("a",{attrs:{href:"rabbitmq-api/src/main/java/com/lucifer/rabbitmq/api/message"}},[a._v("示例代码")])]),a._v(" "),e("h2",{attrs:{id:"_5-4-virtual-host-虚拟主机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-virtual-host-虚拟主机"}},[a._v("#")]),a._v(" 5.4 Virtual host - 虚拟主机")]),a._v(" "),e("p",[a._v("虚拟地址，用于进行逻辑隔离，最上层的消息路由")]),a._v(" "),e("p",[a._v("一个 Virtual host 里面可以有若干个 Exchange 和 Queue")]),a._v(" "),e("p",[a._v("同一个 Virtual host 里面不能有相同名称的 Exchange 和 Queue")])])}),[],!1,null,null,null);e.default=i.exports}}]);