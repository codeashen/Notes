(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{383:function(_,v,t){"use strict";t.r(v);var a=t(4),r=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"一、mysql-常见的存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、mysql-常见的存储引擎"}},[_._v("#")]),_._v(" 一、MySQL 常见的存储引擎")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://z3.ax1x.com/2021/08/12/fw5kV0.png",alt:"fw5kV0.png"}})]),_._v(" "),v("h2",{attrs:{id:"_1-1-myisam-引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-myisam-引擎"}},[_._v("#")]),_._v(" 1.1 MyISAM 引擎")]),_._v(" "),v("p",[v("strong",[_._v("MyISAM 的特点")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("非事务型存储引擎")]),_._v(" "),v("p",[_._v("其他数据库对事务的支持是通过数据库服务层实现的，MySQL 对事务的支持的在存储引擎层实现的。")])]),_._v(" "),v("li",[v("p",[_._v("以堆表方式存储")]),_._v(" "),v("p",[_._v("也就是说存储在 MyISAM 存储引擎中的数据是没有特定顺序的，不像存在聚簇索引中的表，可以按照聚簇索引的顺序存储。MyISAM 存储引擎中并不存在聚簇索引的概念，索引的叶子节点直接指向数据的物理地址，而不是聚簇索引的位置，因此也避免的回表二次查找操作，对于大表的查询性能有所提高。")])]),_._v(" "),v("li",[v("p",[_._v("使用表级锁")]),_._v(" "),v("p",[_._v("MyISAN 存储引擎中查询数据会对表加共享锁，更新操作会对表加排他锁。所以读写操作之间会相互阻塞，所以 MyISAM 不适合高并发读写的场景。")])]),_._v(" "),v("li",[v("p",[_._v("支持Btree索引，空间索引，全文索引")])]),_._v(" "),v("li",[v("p",[_._v("数据和索引是分别存储的，数据存储在 MYD 文件中，索引存在 MYI 文件中")])]),_._v(" "),v("li",[v("p",[_._v("MyISAM 存储引擎可以修复索引和压缩数据")])])]),_._v(" "),v("p",[v("strong",[_._v("MyISAM 使用场景")])]),_._v(" "),v("ul",[v("li",[_._v("读操作远远大于写操作的场景")]),_._v(" "),v("li",[_._v("不需要使用事务的场景")])]),_._v(" "),v("h2",{attrs:{id:"_1-2-csv-引擎交换数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-csv-引擎交换数据"}},[_._v("#")]),_._v(" 1.2 CSV 引擎交换数据")]),_._v(" "),v("p",[v("strong",[_._v("CSV 的特点")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("非特务型存储引擎")])]),_._v(" "),v("li",[v("p",[_._v("数据以 CSV 格式存储")]),_._v(" "),v("p",[_._v("以逗号分隔字段，以换行分割记录行，以双引号包裹字符串。可以直接查看和编辑 CSV 引擎的数据文件。")])]),_._v(" "),v("li",[v("p",[_._v("所有列都不能为 NULL")])]),_._v(" "),v("li",[v("p",[_._v("不支持索引")])])]),_._v(" "),v("p",[v("strong",[_._v("CSV 的使用场景")])]),_._v(" "),v("ul",[v("li",[_._v("做为数据交换的中间表使用，如将 CSV 文件直接导入数据库，或直接导出。")])]),_._v(" "),v("h2",{attrs:{id:"_1-3-archive-引擎存储归档数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-archive-引擎存储归档数据"}},[_._v("#")]),_._v(" 1.3 Archive 引擎存储归档数据")]),_._v(" "),v("p",[v("strong",[_._v("Archive 的特点")])]),_._v(" "),v("ul",[v("li",[_._v("只支持 insert 和 select 操作，不支持 update 和 delete")]),_._v(" "),v("li",[_._v("可以实现高并发的插入")]),_._v(" "),v("li",[_._v("只支持在自增 id 上建立索引")])]),_._v(" "),v("p",[v("strong",[_._v("Archive 的使用场景")])]),_._v(" "),v("ul",[v("li",[_._v("日志和数据采集类应用")]),_._v(" "),v("li",[_._v("数据归档存储")])]),_._v(" "),v("h2",{attrs:{id:"_1-4-memory-引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-memory-引擎"}},[_._v("#")]),_._v(" 1.4 Memory 引擎")]),_._v(" "),v("p",[v("strong",[_._v("Memory 的特点")])]),_._v(" "),v("ul",[v("li",[_._v("非事务型存储引擎")]),_._v(" "),v("li",[_._v("数据保存在内存中，Memory 表的结构在重启以后还会保留，但数据会丢失")]),_._v(" "),v("li",[_._v("所有字段长度固定")]),_._v(" "),v("li",[_._v("支持 Btree 和 Hash 素引")])]),_._v(" "),v("p",[v("strong",[_._v("Memory 的使用场景")])]),_._v(" "),v("ul",[v("li",[_._v("用于缓存字典映射表")]),_._v(" "),v("li",[_._v("缓存周期性分析数据")])]),_._v(" "),v("h2",{attrs:{id:"_1-5-innodb-引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-innodb-引擎"}},[_._v("#")]),_._v(" 1.5 InnoDB 引擎")]),_._v(" "),v("p",[v("strong",[_._v("InnoDB 的特点")])]),_._v(" "),v("ul",[v("li",[_._v("事务型存储引擎支持 ACID")]),_._v(" "),v("li",[_._v("数据按主键聚集存储")]),_._v(" "),v("li",[_._v("支持行级锁及 MVCC")]),_._v(" "),v("li",[_._v("支持 Btree 和自适应 Hash 索引")]),_._v(" "),v("li",[_._v("支持全文和空间索引")])]),_._v(" "),v("p",[v("strong",[_._v("InnoDB 的使用场景")])]),_._v(" "),v("ul",[v("li",[_._v("大多数 OLTP 场景")])]),_._v(" "),v("h2",{attrs:{id:"_1-6-ndb-引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-ndb-引擎"}},[_._v("#")]),_._v(" 1.6 NDB 引擎")]),_._v(" "),v("p",[v("strong",[_._v("NDB 引擎的特点")])]),_._v(" "),v("ul",[v("li",[_._v("事务型存储引擎")]),_._v(" "),v("li",[_._v("数据存储在内存中")]),_._v(" "),v("li",[_._v("支持行级锁")]),_._v(" "),v("li",[_._v("唯一支持高可用集群的存储引擎")]),_._v(" "),v("li",[_._v("支持 Ttree 索引")])]),_._v(" "),v("p",[v("strong",[_._v("NDB 的使用场景")])]),_._v(" "),v("ul",[v("li",[_._v("需要数据完全同步的高可用场景")])]),_._v(" "),v("h1",{attrs:{id:"二、详解-innodb"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、详解-innodb"}},[_._v("#")]),_._v(" 二、详解 InnoDB")]),_._v(" "),v("h2",{attrs:{id:"_2-1-online-ddl"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-online-ddl"}},[_._v("#")]),_._v(" 2.1 Online DDL")]),_._v(" "),v("p",[v("code",[_._v("Online DDL")]),_._v("：在线修改表结构，MySQL 5.6 以上支持，相较于一般 "),v("code",[_._v("DDL")]),_._v("，它在实现修改表结构的同时，依然允许 "),v("code",[_._v("DML")]),_._v(" 操作。")]),_._v(" "),v("p",[_._v("参考：")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://www.cnblogs.com/youyoui/p/9545621.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL InnoDB 修改表列 Online DDL"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://blog.csdn.net/weixin_41519463/article/details/107689821",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL 在线修改表结构的影响"),v("OutboundLink")],1)])]),_._v(" "),v("h3",{attrs:{id:"_2-1-1-不支持在线修改表结构的情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-不支持在线修改表结构的情况"}},[_._v("#")]),_._v(" 2.1.1 不支持在线修改表结构的情况：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://z3.ax1x.com/2021/08/12/f0SJFe.png",alt:"image-20210812161917725"}})]),_._v(" "),v("ul",[v("li",[_._v("在给 InnoDB 表建立全文索引或空间索引时，由于需要增加隐藏列记录索引信息，所以就需要重新建表，无法进行在线操作。当再次在同一表上建立全文索引或空间索引时就可以在线修改表结构。也就是对一个表第一次建立全文索引或空间索引时，不能在线修改。")]),_._v(" "),v("li",[_._v("InnoDB 表是按照主键逻辑来进行顺序存储的，当删除主键的时候必定会对表中的数据重新排列，所以无法在线删除主键。")]),_._v(" "),v("li",[_._v("InnoDB 要求所有自增的列必须是主键的一部分，所以当给一个表增加自增列时，必定会改变主键，所以也会改变表中数据的逻辑顺序，所以此操作无法在线完成。")]),_._v(" "),v("li",[_._v("对任何表的修改都要先获得这个表的元数据锁，也即是说同一个表 DDL 操作是不能够并发执行的。另外对一个长时间运行的事务已经获取了表的元数据锁，也会阻塞 DDL 的执行。")])]),_._v(" "),v("h3",{attrs:{id:"_2-1-2-在线-ddl-存在的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-在线-ddl-存在的问题"}},[_._v("#")]),_._v(" 2.1.2 在线 DDL 存在的问题")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("有部分语句不支持在线 DDL")])]),_._v(" "),v("li",[v("p",[_._v("长时间的 DDL 操作会引起严重的主从延迟")])]),_._v(" "),v("li",[v("p",[_._v("无法对 DDL 操作进行资源限制")]),_._v(" "),v("p",[_._v("DDL 操作还需要磁盘的临时空间，当对一个大表进行 DDL 操作时，很容易出现磁盘的临时目录空间不足的情况，造成 DDL 操作的失败。")])])]),_._v(" "),v("h3",{attrs:{id:"_2-1-3-如何更安全的执行-ddl"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-如何更安全的执行-ddl"}},[_._v("#")]),_._v(" 2.1.3 如何更安全的执行 DDL")]),_._v(" "),v("p",[_._v("使用第三方工具："),v("code",[_._v("pt-online-schema-change [OPTIONS] DSN")]),_._v("，工具会根据建立一个在原表基础上经过修改的一个新表，再分批次将数据导入，最后重命名两张表，就完成了表的修改。修改过程中只有在最后修改表名的时候会短暂锁表，并且是分批操作也不会有很大的主从延迟。")]),_._v(" "),v("h2",{attrs:{id:"_2-2-事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-事务"}},[_._v("#")]),_._v(" 2.2 事务")]),_._v(" "),v("h3",{attrs:{id:"_2-2-1-事务特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-事务特点"}},[_._v("#")]),_._v(" 2.2.1 事务特点")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://z3.ax1x.com/2021/08/12/f0KR5d.png",alt:"image-20210812170857412"}})]),_._v(" "),v("h3",{attrs:{id:"_2-2-2-innodb-如何实现事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-innodb-如何实现事务"}},[_._v("#")]),_._v(" 2.2.2 InnoDB 如何实现事务")]),_._v(" "),v("p",[_._v("InnoDB 为实现事务，引入了回滚日志（Undo Log）和重做日志（Redo Log），这两种日志在任何支持事务的存储引擎中都是存在的。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://z3.ax1x.com/2021/08/12/f0MHQx.png",alt:"image-20210812171339564"}})]),_._v(" "),v("ul",[v("li",[_._v("Undo Log 记录数据修改前的状态，如果事务执行过程中失败，就要使用 Undo Log 回滚数据。主要实现事务的原子性。")]),_._v(" "),v("li",[_._v("Redo Log 记录数据修改后的状态，用于实现事务的一致性。")]),_._v(" "),v("li",[_._v("事务的隔离性是通过加锁实现的，分为共享锁和排他锁，共享锁和排他锁之间是互斥的。")]),_._v(" "),v("li",[_._v("事务的持久性由回滚日志和重做日志共同实现，在事务提交过程总如果出现了数据库的崩溃，恢复之后就要配置 Redo Log 和 Undo Log 对数据进行恢复，以保证事务的持久性。")])]),_._v(" "),v("p",[_._v("示例：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://z3.ax1x.com/2021/08/12/f01tQ1.png",alt:"image-20210812172333583"}})]),_._v(" "),v("h3",{attrs:{id:"_2-2-3-多版本并发控制-mvcc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-多版本并发控制-mvcc"}},[_._v("#")]),_._v(" 2.2.3 多版本并发控制 MVCC")]),_._v(" "),v("p",[_._v("InnoDB 读是否会阻塞写？读写应该相互阻塞吗？")]),_._v(" "),v("ul",[v("li",[_._v("查询需要对资源加共享锁（S）")]),_._v(" "),v("li",[_._v("数据修改需要对资源加排它锁（x）")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://z3.ax1x.com/2021/08/12/f01xkF.png",alt:"image-20210812172647224"}})]),_._v(" "),v("p",[_._v("通过实现会发现：")]),_._v(" "),v("p",[_._v("客户端 A 对表中 id = 1 的记录进行修改，不提交事务，客户端 B 可以查询到 id = 1 的老数据。客户端 B 没有读到客户端 A 未提交的数据，同时客户端 A 未提交的事务也没有阻塞客户端 B 的读操作。这似乎和上面的排他锁和共享锁不兼容矛盾，InnoDB 能做到这一点是因为其利用到了 Undo Log 的多版本控制，即 MVCC。")]),_._v(" "),v("p",[_._v("MVCC（多版本并发控制），结合下图介绍 MVCC：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://z3.ax1x.com/2021/08/12/f08fPg.png",alt:"image-20210812173603660"}})]),_._v(" "),v("p",[_._v("如图：")]),_._v(" "),v("ol",[v("li",[_._v("事务 1（Trx-1）对数据 A 进行写操作，获取到了 A 的排他锁，开始执行操作")]),_._v(" "),v("li",[_._v("事务 1 先将 A 原数据存入 Undo Log，再进行修改操作")]),_._v(" "),v("li",[_._v("事务 2（Trx-2）再事务 1 执行过程中读取数据 A，由于事务 1 对 A 加了排他锁，所以事务 2 读不到数据 A")]),_._v(" "),v("li",[_._v("此时 InnoDB 会去 Undo Log 中获取的数据 A 原先值，返回给事务 2")])]),_._v(" "),v("h1",{attrs:{id:"引用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[_._v("#")]),_._v(" 引用")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://www.cnblogs.com/holm/p/12984760.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL 常见存储引擎特点"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://www.cnblogs.com/youyoui/p/9545621.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("MySQL InnoDB 修改表列 Online DDL"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);