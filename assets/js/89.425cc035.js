(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{414:function(e,r,t){"use strict";t.r(r);var s=t(4),o=Object(s.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Kubernetes 是谷歌以 Borg 为前身，基于谷歌 15 年生产环境经验的基础上开源的一个项目，Kubernetes 致力于提供跨主机集群的自动部署、扩展、高可用以及运行应用程序容器的平台。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cc.hjfile.cn/cc/img/20220511/2022051106182900072077.png",alt:"image-20220511181827824"}})]),e._v(" "),r("h1",{attrs:{id:"master节点-整个集群的控制中枢"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#master节点-整个集群的控制中枢"}},[e._v("#")]),e._v(" Master节点：整个集群的控制中枢")]),e._v(" "),r("p",[e._v("Master 节点是 Kubernetes 集群的控制节点，在生产环境中不建议部署集群核心组件外的任何 Pod，公司业务的 Pod 更是不建议部署到 Master 节点上，以免升级或者维护时对业务造成影响。")]),e._v(" "),r("ul",[r("li",[r("p",[r("strong",[e._v("Kube-APIServer")]),e._v("：集群的控制中枢，各个模块之间信息交互都需要经过Kube-APIServer，同时它也是集群管理、资源配置、整个集群安全机制的入口。")]),e._v(" "),r("p",[e._v("APIServer是整个集群的控制中枢，提供集群中各个模块之间的数据交换，并将集群状态和信息存储到分布式键-值(key-value)存储系统Etcd集群中。同时它也是集群管理、资源配额、提供完备的集群安全机制的入口，为集群各类资源对象提供增删改查以及watch的REST API接口。APIServer作为Kubernetes的关键组件，使用Kubernetes API和 JSON over HTTP提供Kubernetes的内部和外部接口。")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("Controller-Manager")]),e._v("：集群的状态管理器，保证Pod或其他资源达到期望值，也是需要和APIServer进行通信，在需要的时候创建、更新或删除它所管理的资源。")]),e._v(" "),r("p",[e._v("Controller Manager是集群状态管理器（它的英文直译名为控制器管理器），以保证Pod或其他资源达到期望值。当集群中某个Pod的副本数或其他资源因故障和错误导致无法正常运行，没有达到设定的值时，Controller Manager会尝试自动修复并使其达到期望状态。Controller Manager包含NodeController、ReplicationController、EndpointController、NamespaceController、ServiceAccountController、ResourceQuotaController、ServiceController和TokenController，该控制器管理器可与API服务器进行通信以在需要时创建、更新或删除它所管理的资源，如Pod、服务断点等。")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("Scheduler")]),e._v("：集群的调度中心，它会根据指定的一系列条件，选择一个或一批最佳的节点，然后部署我们的Pod。")]),e._v(" "),r("p",[e._v("Scheduler是集群Pod的调度中心，主要是通过调度算法将Pod分配到最佳的节点（Node），它通过APIServer监听所有Pod的状态，一旦发现新的未被调度到任何Node节点的Pod（PodSpec.NodeName为空），就会根据一系列策略选择最佳节点进行调度，对每一个Pod创建一个绑定（binding），然后被调度的节点上的Kubelet负责启动该Pod。Scheduler是集群可插拔式组件，它跟踪每个节点上的资源利用率以确保工作负载不会超过可用资源。因此Scheduler必须知道资源需求、资源可用性以及其他约束和策略，例如服务质量、亲和力/反关联性要求、数据位置等。Scheduler将资源供应与工作负载需求相匹配以维持系统的稳定和可靠，因此Scheduler在调度的过程中需要考虑公平、资源高效利用、效率等方面的问题。")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("Etcd")]),e._v("：键值数据库，报错一些集群的信息，一般生产环境中建议部署三个以上节点（奇数个）。")]),e._v(" "),r("p",[e._v("Etcd由CoreOS开发，用于可靠地存储集群的配置数据，是一种持久性、轻量型、分布式的键-值（key-value）数据存储组件。Etcd作为Kubernetes集群的持久化存储系统，集群的灾难恢复、状态信息存储都与其密不可分，所以在Kubernetes高可用集群中，Etcd的高可用是至关重要的一部分，在生产环境中建议部署为大于3的奇数个数的Etcd，以保证数据的安全性和可恢复性。Etcd可与Master组件部署在同一个节点上，大规模集群环境下建议部署在集群外，并且使用高性能服务器来提高Etcd的性能和降低Etcd同步数据的延迟。")])])]),e._v(" "),r("h1",{attrs:{id:"node-工作节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-工作节点"}},[e._v("#")]),e._v(" Node：工作节点")]),e._v(" "),r("p",[e._v("Node 节点也被称为 Worker 或 Minion，是主要负责部署容器（工作负载）的单机（或虚拟机），集群中的每个节点都必须具备容器的运行环境（runtime），比如Docker 及其他组件等。")]),e._v(" "),r("ul",[r("li",[r("p",[r("strong",[e._v("Kubelet")]),e._v("：负责与Master通信协作，管理该节点上的Pod。")]),e._v(" "),r("p",[e._v("Kubelet 作为守护进程运行在 Node 节点上，负责监听该节点上所有的 Pod，同时负责上报该节点上所有 Pod 的运行状态，确保节点上的所有容器都能正常运行。当Node节点宕机（NotReady状态）时，该节点上运行的 Pod 会被自动地转移到其他节点上。")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("Kube-proxy")]),e._v("：负责 Pod 之间的通信和负载均衡，将指定的流量分发到后端正确的机器上。")]),e._v(" "),r("p",[e._v("Kube-proxy 有不同的工作方式，有 IPVS 和 Iptables，新版本都建议使用 ipvs，因为其性能强大。")]),e._v(" "),r("ul",[r("li",[e._v("Ipvs：监听 Master 节点增加和删除 service 以及 endpoint 的消息，调用 Netlink 接口创建相应的 IPVS 规则。通过 IPVS 规则，将流量转发至相应的 Pod 上。")]),e._v(" "),r("li",[e._v("Iptables：监听 Master 节点增加和删除 service 以及 endpoint 的消息，对于每一个 Service，他都会场景一个 iptables 规则，将 service 的 clusterIP 代理到后端对应的 Pod。")])]),e._v(" "),r("div",{staticClass:"language-bash line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看你 Kube-proxy 的端口号")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("netstat")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-lntp")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" kube-proxy\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 使用上一步获取的端口号，查看 Kube-proxy 工作模式")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:10249/proxyMode\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br")])])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("其他组件")])]),e._v(" "),r("p",[e._v("使用 "),r("code",[e._v("kubectl get po -n kube-system -owide")]),e._v(" 查看 k8s 系统的相关 pod，可以看到有以下组件的 pod。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cc.hjfile.cn/cc/img/20220511/202205110621164689467.png",alt:"image-20220511182115175"}})]),e._v(" "),r("ul",[r("li",[e._v("Calico：符合 CNI 标准的网络插件，给每个 Pod 生成一个唯一的 IP 地址，并且把每个节点当做一个路由器。")]),e._v(" "),r("li",[e._v("CoreDNS：用于 Kubernetes 集群内部 Service 的解析，可以让 Pod 把 Service 名称解析成 IP 地址，然后通过 Service 的 IP 地址进行连接到对应的应用上。")]),e._v(" "),r("li",[e._v("Docker：容器引擎，负责对容器的管理。")])])])]),e._v(" "),r("h1",{attrs:{id:"附录-官方文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#附录-官方文档"}},[e._v("#")]),e._v(" 附录：官方文档")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/overview/components/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubernetes 组件"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://kubernetes.io/zh/docs/reference/command-line-tools-reference/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes 组件工具"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=o.exports}}]);